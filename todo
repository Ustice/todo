#!/usr/bin/env node
'use strict';

var Promise 			= require('bluebird');
var config 				= require(__dirname + '/todo.config');
var packageConfig = require(__dirname + '/package.json');
var fs 						= Promise.promisifyAll(require('fs'));
var git 					= require(__dirname + '/lib/git');
var inquirer			= require('inquirer');

var exec 			= Promise.promisify(require('child_process').exec);
var todo 			= require('commander');
var keychain 	= require(__dirname + '/lib/keychain-promise');


// var githubKeychain = {
// 	account: config.github.login,
// 	service: 'github.com',
// 	type: 'internet'
// };

inquirer.promptAsync = function inquirer$promptAsync (questions) {
	return new Promise(function (resolve, reject) {
		inquirer.prompt(questions, function (answers) {
			resolve(answers);
		})
	});
};

inquirer.confirm = function inquirer$confirm (query) {
	return new Promise(function (resolve, reject) {
		var question = {
			name: 'confirm',
			message: query,
			'default': 'Y'
		}
		inquirer.prompt(question, function (answers) {
			answers.confirm = !!answers.confirm.match(/^(?:y|yes)/i);
			resolve(answers.confirm);
		})
	});
};

var projectDirectory;

todo
	.version(packageConfig.version)
	.description(packageConfig.description)
;

todo
	.command('help [command]')
	.description('Displays help information.')
	.action(function (command) {
		console.log(command);
		todo.outputHelp();
		process.exit();
	})
;

todo
	.command('init')
	.description('Initializes the todo command system. This will create the .todo file as well as the todo.config file.')
	.option('-d, --debug', 'Shows additional information for debugging purposes.')
	.action(function (command) {
		var questions = [
			{
				name: 'projectName',
				message: 'What is the name of this project?',
				default: 'Press enter to retrieve it from package.json.',
				filter: function (name) {
					return (!name || name === 'Press enter to retrieve it from package.json.') ? packageConfig.name : name;
				}
			},{
				name: 'userName',
				message: 'What is your name?',
			},{
				name: 'userEmail',
				message: 'What is your default email address?',
			},{
				name: 'gitRepo',
				message: 'Where is your project GitHub repo located?',
				default: 'Press Enter to load from origin.',
				filter: function (repo) {
					var done = this.async();
					repo = (repo !== 'Press Enter to load from origin.') ? repo : null;

					exec('git remote -v')
					.then(function (gitResponse) {
						var re = /^(?:origin\s*)(\S*)([\n\s]|.)*/;
						done(gitResponse[0].replace(re, '$1'));
					});
				}
			}, {
				name: 'githubAccount',
				message: 'What is your email address that is registered with GitHub?',
				default: function (answers) {
					return answers.userEmail;
				}
			}, {
				name: 'gitDevBranch',
				message: 'What is the name of your development branch?',
				default: 'develop'
			}, {
				name: 'jiraDomain',
				message: 'Where is your JIRA instance running? (You may simply paste in an entire URL.)',
				filter: function (url) {
					return url.replace(/^https?:\/\/([^\/]*)\/?.*$/, '$1');
				}
			}, {
				name: 'jiraAccount',
				message: 'What is the email address that is registered with JIRA?',
				default: function (answers) {
					return answers.userEmail;
				}
			}, {
				name: 'jiraProject',
				message: 'What is the JIRA project abbreviation?'
			}, {
				name: 'slackDomain',
				message: 'What is your Slack team name? (You can find this in the top-left corner of Slack.)'
			}, {
				name: 'slackAccount',
				message: 'What is your Slack username?',
				filter: function (name) {
					return name.replace(/^([^@])/, '@$1');
				}
			}, {
				name: 'slackToken',
				message: 'What is your slack API authentication token? (This will be safely stored in your secure keychain, and not your config file.)\n' +
					'(Press enter to open the browser to open your browser to where you can find it.)',
				filter: function (token) {
					if (!token) exec('open https://api.slack.com/#auth');
				}
			}, {
				name: 'slackToken2',
				message: 'What is your slack API authentication token?',
				when: function (answers) {
					return !answers.slackToken;
				}
			}, {
				name: 'slackChannel',
				message: 'What slack channel or private group does your team use?',
				filter: function (channel) {
					return channel.replace(/^([^#])/, '#$1');
				}
			}, {
				name: 'sign',
				type: 'confirm',
				message: 'Would you like to sign the package.json file as a contributor?',
				default: true,
			}, {
				name: 'confirm',
				type: 'confirm',
				message: 'Does everything look okay?',
				default: true
			}
		];

		git.getRootDirectory()
		.then(function (directory) {
			if (command.debug) console.log('Project root directory: %s\nChecking for todo.config.', directory);
			projectDirectory = directory;
			return fs.readFileAsync(directory + '/todo.config');
		}).then(function (todoConfig) {
			if (todoConfig) {
				if (command.debug) console.log('todo.config found.');
				// Config file exists.
				return inquirer.confirm('A todo.config file exists. Are you sure you want to reinitialize?').then(function (yes) {
					if (yes) {
						if (command.debug) console.log('Reinitializing.');
						return true;
					} else {
						console.log('Aborting initialization.');
						process.exit();
					}
				});
			} else {
				if (command.debug) console.log('todo.config not found.');
				return true;
			}
		}).then(function () {
			var configFile;
			if (!projectDirectory) {
				throw new Error('Unknown project directory.');
			}

			return inquirer.promptAsync(questions);
		}).then(function (answers) {
			if (command.debug) console.log('Processing answers.');
			var configData = {
				name: answers.projectName,
				git: {
					account: answers.githubAccount,
					repo: answers.gitRepo,
					devBranch: answers.gitDevBranch
				},
				jira: {
					domain: answers.jiraDomain,
					account: answers.jiraAccount,
					project: answers.jiraProject
				},
				slack: {
					domain: answers.slackDomain,
					account: answers.slackAccount
				},
				user: {
					name: answers.userName,
					email: answers.userEmail,
					signing: answers.sign
				},
				options: {
					signed: false
				}
			};

			return fs.writeFileAsync(projectDirectory + '/.todoconfig.json', JSON.stringify(configData, null, '\t'));
		}).then(function (result) {
			console.log('Configuration file sucessfully written.');
		});

	})
;

todo
	.command('list [orderBy] [users ...]')
	.description('Lists tasks assigned to you or the specified users.')
	.option('--all', 				'Lists all tasks in the current sprint.')
	.option('--available', 	'Lists all unassigned tasks or the tasks that are assigned to the user.')
	.option('--done', 			'Includes tasks that are complete.')
	.option('--unassigned', 'Lists all tasks that are unassigned')
	.action(function () {
		var args = Array.prototype.slice.call(arguments);
		var command = args.pop();

		if (command.all) console.log('Listing all tasks.');
		if (command.available) console.log('Listing all available lists');
		if (command.done) console.log('Listing all completed tasks');
		if (command.unassigned) console.log('Listing all unassigned tasks');


	})
;

todo
.command('github')
	.action(function (env) {

		keychain.getPassword(githubKeychain).then(function (password) {
			console.log('Password is %s.', password);
		}).catch(function (error) {
			console.error(error);
		});

		exec("git rev-parse --show-toplevel")
		.then(function (localRepoPath) {

		}).catch(function (error) {
			console.error('Unable to locate git repository. todo must be run within a git repo.')
		});


	})
;

todo.parse(process.argv);
